name: Deploy SeeGap Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: eminent-subset-462023-f9
  GCP_VM_NAME: seegap-app-vm
  GCP_ZONE: europe-west1-b
  GCP_VM_IP: 34.140.57.52
  DEPLOY_PATH: /var/www/html

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/179814022008/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
        service_account: 'github-actions-deploy@eminent-subset-462023-f9.iam.gserviceaccount.com'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: Install gcloud beta components
      run: |
        echo "üì¶ Installing gcloud beta components..."
        gcloud components install beta --quiet
        
    - name: Create deployment package
      run: |
        echo "üì¶ Creating deployment package..."
        mkdir -p /tmp/deploy
        rsync -av --exclude='.git' --exclude='.github' --exclude='node_modules' --exclude='*.log' --exclude='uploads/logs/*' --exclude='terraform' --exclude='backup_*' --exclude='test_*' --exclude='seegap-app.tar.gz' --exclude='docker*' --exclude='Dockerfile' . /tmp/deploy/
        cd /tmp/deploy
        tar -czf /tmp/seegap-app.tar.gz .
        mv /tmp/seegap-app.tar.gz $GITHUB_WORKSPACE/
        
    - name: Upload application files
      run: |
        echo "üöÄ Uploading application files to GCP VM..."
        gcloud beta compute scp seegap-app.tar.gz ${{ env.GCP_VM_NAME }}:~/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
          
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üîß Starting deployment..."
        
        # Create backup of current deployment
        if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html 2>/dev/null)" ]; then
          echo "üìã Creating backup of current deployment..."
          sudo mkdir -p /var/backups/seegap
          sudo tar -czf /var/backups/seegap/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /var/www/html .
        fi
        
        echo "üìÇ Extracting new deployment..."
        mkdir -p /tmp/seegap-deploy
        cd /tmp/seegap-deploy
        tar -xzf ~/seegap-app.tar.gz
        
        echo "‚öôÔ∏è Creating production configuration..."
        cat > config.php << 'CONFIG_EOF'
        <?php
        define('DATABASE_SERVER',   'localhost');
        define('DATABASE_USERNAME', 'seegap_prod_user_2025');
        define('DATABASE_PASSWORD', 'SeeGap#Prod$2025!MySQL@Secure');
        define('DATABASE_NAME',     'seegap_production_db');
        define('SITE_URL',          'https://si.seegap.com/');
        CONFIG_EOF
        
        echo "üöÄ Deploying files to Nginx web directory..."
        sudo mkdir -p /var/www/html
        sudo rsync -av --delete /tmp/seegap-deploy/ /var/www/html/
        
        echo "üîß Setting proper file permissions..."
        sudo chown -R www-data:www-data /var/www/html
        sudo find /var/www/html -type d -exec chmod 755 {} \;
        sudo find /var/www/html -type f -exec chmod 644 {} \;
        sudo chmod -R 777 /var/www/html/uploads/
        
        echo "üîÑ Restarting Nginx and PHP-FPM..."
        sudo systemctl reload nginx
        sudo systemctl restart php8.1-fpm || sudo systemctl restart php8.0-fpm || sudo systemctl restart php7.4-fpm
        
        echo "üßπ Cleaning up temporary files..."
        rm -rf /tmp/seegap-deploy
        rm -f ~/seegap-app.tar.gz
        
        echo "‚úÖ Deployment completed successfully!"
        EOF
        
    - name: Upload and execute deployment script
      run: |
        echo "üöÄ Uploading deployment script..."
        gcloud beta compute scp deploy.sh ${{ env.GCP_VM_NAME }}:/tmp/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
        
        echo "üîß Executing deployment on GCP VM..."
        gcloud beta compute ssh ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --command="chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        
    - name: Health check
      run: |
        echo "üîç Performing health check..."
        sleep 10
        
        for i in {1..10}; do
          if curl -f -s https://si.seegap.com/ | grep -q "SeeGap\|login\|dashboard"; then
            echo "‚úÖ Application is responding correctly!"
            break
          else
            echo "‚è≥ Attempt $i: Application not ready yet, waiting..."
            sleep 10
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Health check failed after 10 attempts"
            exit 1
          fi
        done
        
    - name: Deployment Summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain**: https://si.seegap.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Web Server**: Nginx + PHP-FPM" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: MySQL (localhost)" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "üîÑ Rolling back deployment due to failure..."
        gcloud beta compute ssh ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --command='LATEST_BACKUP=$(sudo ls -t /var/backups/seegap/backup-*.tar.gz 2>/dev/null | head -n1) && if [ -n "$LATEST_BACKUP" ]; then echo "üìã Restoring from backup: $LATEST_BACKUP" && sudo rm -rf /var/www/html/* && sudo tar -xzf "$LATEST_BACKUP" -C /var/www/html && sudo systemctl reload nginx; else echo "‚ùå No backup found for rollback"; fi'
