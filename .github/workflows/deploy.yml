name: Deploy SeeGap Application (Full - Backup)

on:
  workflow_dispatch:

env:
  GCP_PROJECT_ID: eminent-subset-462023-f9
  GCP_VM_NAME: seegap-app-vm
  GCP_ZONE: europe-west1-b
  GCP_VM_IP: 34.140.57.52
  DEPLOY_PATH: /var/www/seegap

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/179814022008/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
        service_account: 'github-actions-deploy@eminent-subset-462023-f9.iam.gserviceaccount.com'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: Install gcloud beta components
      run: |
        echo "📦 Installing gcloud beta components..."
        gcloud components install beta --quiet
        
    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        mkdir -p /tmp/deploy
        rsync -av --exclude='.git' --exclude='.github' --exclude='node_modules' --exclude='*.log' --exclude='uploads/logs/*' --exclude='terraform' --exclude='backup_*' --exclude='test_*' --exclude='seegap-app.tar.gz' --exclude='docker*' --exclude='Dockerfile' . /tmp/deploy/
        cd /tmp/deploy
        tar -czf /tmp/seegap-app.tar.gz .
        mv /tmp/seegap-app.tar.gz $GITHUB_WORKSPACE/
        
    - name: Upload application files
      run: |
        echo "🚀 Uploading application files to GCP VM..."
        gcloud beta compute scp seegap-app.tar.gz ${{ env.GCP_VM_NAME }}:~/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
          
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🔧 Starting safe deployment with uploads preservation..."
        
        # Create backup of current deployment
        if [ -d "/var/www/seegap" ] && [ "$(ls -A /var/www/seegap 2>/dev/null)" ]; then
          echo "📋 Creating backup of current deployment..."
          sudo mkdir -p /var/backups/seegap
          sudo tar -czf /var/backups/seegap/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /var/www/seegap .
        fi
        
        echo "📂 Extracting new deployment..."
        mkdir -p /tmp/seegap-deploy
        cd /tmp/seegap-deploy
        tar -xzf ~/seegap-app.tar.gz
        
        echo "⚙️ Setting up production configuration..."
        # Copy production config to replace the regular config file
        cp config.production.php config.php
        
        echo "💾 Backing up uploads and user data..."
        sudo mkdir -p /var/www/seegap
        if [ -d "/var/www/seegap/uploads" ]; then
          sudo cp -r /var/www/seegap/uploads /tmp/uploads_backup
          echo "✅ Uploads folder backed up"
        fi
        
        # Backup config.php if it exists
        if [ -f "/var/www/seegap/config.php" ]; then
          sudo cp /var/www/seegap/config.php /tmp/config_backup.php
          echo "✅ Config file backed up"
        fi
        
        echo "🚀 Deploying application files (preserving user data)..."
        # Deploy application files but exclude uploads to preserve user data
        sudo rsync -av --delete --exclude='uploads' /tmp/seegap-deploy/ /var/www/seegap/
        
        echo "🔄 Restoring uploads and user data..."
        if [ -d "/tmp/uploads_backup" ]; then
          sudo rm -rf /var/www/seegap/uploads 2>/dev/null || true
          sudo mv /tmp/uploads_backup /var/www/seegap/uploads
          echo "✅ Uploads folder restored"
        else
          # Create uploads folder if it doesn't exist
          sudo mkdir -p /var/www/seegap/uploads
          echo "✅ Uploads folder created"
        fi
        
        echo "🔧 Setting proper file permissions..."
        sudo chown -R HishamSait:HishamSait /var/www/seegap
        sudo find /var/www/seegap -type d -exec chmod 755 {} \;
        sudo find /var/www/seegap -type f -exec chmod 644 {} \;
        sudo chmod -R 777 /var/www/seegap/uploads/
        
        echo "🔄 Checking deployment method and restarting services..."
        if docker --version >/dev/null 2>&1 && [ -f "/var/www/seegap/docker-compose.yml" ]; then
          echo "🐳 Docker deployment detected, restarting containers..."
          cd /var/www/seegap
          docker-compose down
          docker-compose up -d --build
          echo "✅ Docker containers restarted"
        elif systemctl is-active --quiet nginx; then
          echo "🌐 Nginx deployment detected, restarting services..."
          sudo systemctl reload nginx
          sudo systemctl restart php8.1-fpm || sudo systemctl restart php8.0-fpm || sudo systemctl restart php7.4-fpm
          echo "✅ Nginx and PHP-FPM restarted"
        else
          echo "⚠️ No web server detected, checking for Apache..."
          if systemctl is-active --quiet apache2; then
            sudo systemctl restart apache2
            echo "✅ Apache restarted"
          else
            echo "🔧 Starting basic PHP server for testing..."
            cd /var/www/seegap && nohup php -S 0.0.0.0:8080 > /dev/null 2>&1 &
          fi
        fi
        
        echo "🧹 Cleaning up temporary files..."
        rm -rf /tmp/seegap-deploy
        rm -f ~/seegap-app.tar.gz
        rm -f /tmp/config_backup.php 2>/dev/null || true
        
        echo "✅ Safe deployment completed successfully!"
        echo "💾 User uploads preserved: ✅"
        echo "🗄️ Database settings preserved: ✅"
        EOF
        
    - name: Upload and execute deployment script
      run: |
        echo "🚀 Uploading deployment script..."
        gcloud beta compute scp deploy.sh ${{ env.GCP_VM_NAME }}:/tmp/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
        
        echo "🔧 Executing deployment on GCP VM..."
        gcloud beta compute ssh ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --command="chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        
    - name: Deployment Summary
      run: |
        echo "✅ Deployment completed successfully!"
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain**: https://si.seegap.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Files deployed to**: /var/www/seegap" >> $GITHUB_STEP_SUMMARY
