name: Deploy SeeGap Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: eminent-subset-462023-f9
  GCP_VM_NAME: seegap-app-vm
  GCP_ZONE: europe-west1-b
  GCP_VM_IP: 34.140.57.52
  DEPLOY_PATH: /var/www/seegap

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/179814022008/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
        service_account: 'github-actions-deploy@eminent-subset-462023-f9.iam.gserviceaccount.com'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        mkdir -p /tmp/deploy
        rsync -av --exclude='.git' --exclude='.github' --exclude='node_modules' --exclude='*.log' --exclude='uploads/logs/*' --exclude='terraform' --exclude='backup_*' --exclude='test_*' --exclude='seegap-app.tar.gz' . /tmp/deploy/
        cd /tmp/deploy
        tar -czf /tmp/seegap-app.tar.gz .
        mv /tmp/seegap-app.tar.gz $GITHUB_WORKSPACE/
        
    - name: Upload application files
      run: |
        echo "🚀 Uploading application files to GCP VM..."
        gcloud beta compute scp seegap-app.tar.gz ${{ env.GCP_VM_NAME }}:/tmp/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
          
    - name: Upload database dump
      run: |
        echo "📊 Uploading database dump..."
        gcloud beta compute scp install/dump.sql ${{ env.GCP_VM_NAME }}:/tmp/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
          
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🔧 Starting deployment..."
        sudo mkdir -p /var/www/seegap
        sudo chown $USER:$USER /var/www/seegap
        
        if [ -d "/var/www/seegap/current" ]; then
          echo "📋 Creating backup of current deployment..."
          sudo cp -r /var/www/seegap/current /var/www/seegap/backup-$(date +%Y%m%d-%H%M%S)
        fi
        
        echo "📂 Extracting new deployment..."
        cd /var/www/seegap
        rm -rf new
        mkdir -p new
        cd new
        tar -xzf /tmp/seegap-app.tar.gz
        
        echo "⚙️ Creating production configuration..."
        cat > config.php << 'CONFIG_EOF'
        <?php
        define('DATABASE_SERVER',   'mysql');
        define('DATABASE_USERNAME', 'seegap_prod_user_2025');
        define('DATABASE_PASSWORD', 'SeeGap#Prod$2025!MySQL@Secure');
        define('DATABASE_NAME',     'seegap_production_db');
        define('SITE_URL',          'https://si.seegap.com/');
        CONFIG_EOF
        
        chmod 644 config.php
        chmod -R 755 themes/
        chmod -R 755 plugins/
        chmod -R 777 uploads/
        
        echo "🛑 Stopping current services..."
        docker-compose down || true
        
        echo "📊 Setting up database..."
        docker-compose up -d mysql
        sleep 30
        
        echo "⏳ Waiting for MySQL to be ready..."
        until docker-compose exec -T mysql mysqladmin ping -h"localhost" --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done
        
        echo "📥 Setting up database and user..."
        docker-compose exec -T mysql mysql -u root -p'Root#MySQL$2025!SuperSecure@GCP' -e "CREATE DATABASE IF NOT EXISTS seegap_production_db; CREATE USER IF NOT EXISTS 'seegap_prod_user_2025'@'%' IDENTIFIED BY 'SeeGap#Prod\$2025!MySQL@Secure'; GRANT ALL PRIVILEGES ON seegap_production_db.* TO 'seegap_prod_user_2025'@'%'; FLUSH PRIVILEGES;"
        
        echo "📥 Importing database dump..."
        docker-compose exec -T mysql mysql -u root -p'Root#MySQL$2025!SuperSecure@GCP' seegap_production_db < /tmp/dump.sql
        
        echo "🚀 Starting all services..."
        docker-compose up -d
        sleep 30
        
        echo "🔄 Switching to new deployment..."
        cd /var/www/seegap
        rm -rf current
        mv new current
        
        rm -f /tmp/seegap-app.tar.gz
        rm -f /tmp/dump.sql
        
        echo "✅ Deployment completed successfully!"
        EOF
        
    - name: Upload and execute deployment script
      run: |
        echo "🚀 Uploading deployment script..."
        gcloud beta compute scp deploy.sh ${{ env.GCP_VM_NAME }}:/tmp/ --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }}
        
        echo "🔧 Executing deployment on GCP VM..."
        gcloud beta compute ssh ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --command="chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        
    - name: Health check
      run: |
        echo "🔍 Performing health check..."
        sleep 30
        
        for i in {1..10}; do
          if curl -f -s https://si.seegap.com/ | grep -q "SeeGap\|login\|dashboard"; then
            echo "✅ Application is responding correctly!"
            break
          else
            echo "⏳ Attempt $i: Application not ready yet, waiting..."
            sleep 10
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Health check failed after 10 attempts"
            exit 1
          fi
        done
        
    - name: Verify database connection
      run: |
        echo "🔍 Verifying database connection..."
        gcloud beta compute ssh ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --command='cd /var/www/seegap/current && docker-compose exec -T mysql mysql -u seegap_prod_user_2025 -p"SeeGap#Prod$2025!MySQL@Secure" seegap_production_db -e "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = \"seegap_production_db\";"'
        
    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain**: https://si.seegap.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: ✅ Production DB Imported" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "🔄 Rolling back deployment due to failure..."
        gcloud beta compute ssh ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --command='cd /var/www/seegap && LATEST_BACKUP=$(ls -t backup-* 2>/dev/null | head -n1) && if [ -n "$LATEST_BACKUP" ]; then echo "📋 Restoring from backup: $LATEST_BACKUP" && rm -rf current && cp -r "$LATEST_BACKUP" current && cd current && docker-compose up -d; else echo "❌ No backup found for rollback"; fi'
